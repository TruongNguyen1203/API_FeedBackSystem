// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(StoreContext))]
    [Migration("20210515094254_InitialCreate3")]
    partial class InitialCreate3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Entities.Admin", b =>
                {
                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("UserName");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("Core.Entities.Feedback", b =>
                {
                    b.Property<int>("FeedbackID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdminID")
                        .HasColumnType("int");

                    b.Property<string>("AdminUserName")
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("TypeFeedbackID")
                        .HasColumnType("int");

                    b.HasKey("FeedbackID");

                    b.HasIndex("AdminUserName");

                    b.HasIndex("TypeFeedbackID");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("Core.Entities.Feedback_Question", b =>
                {
                    b.Property<int>("FeedbackID")
                        .HasColumnType("int");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.HasKey("FeedbackID", "QuestionID");

                    b.ToTable("Feedback_Question");
                });

            modelBuilder.Entity("Core.Entities.Module", b =>
                {
                    b.Property<int>("ModuleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdminID")
                        .HasColumnType("int");

                    b.Property<string>("AdminUserName")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FeedbackEndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("FeedbackID")
                        .HasColumnType("int");

                    b.Property<DateTime>("FeedbackStartTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModuleName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ModuleID");

                    b.HasIndex("AdminUserName");

                    b.HasIndex("FeedbackID");

                    b.ToTable("Module");
                });

            modelBuilder.Entity("Core.Entities.Topic", b =>
                {
                    b.Property<int>("TopicID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TopicName")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("TopicID");

                    b.ToTable("Topic");
                });

            modelBuilder.Entity("Core.Entities.Trainee_Assignment", b =>
                {
                    b.Property<string>("RegistrationCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TraineeID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("RegistrationCode", "TraineeID");

                    b.ToTable("Trainee_Assignment");
                });

            modelBuilder.Entity("Core.Entities.Trainee_Comment", b =>
                {
                    b.Property<int>("ClassID")
                        .HasColumnType("int");

                    b.Property<int>("ModuleID")
                        .HasColumnType("int");

                    b.Property<string>("TraineeID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("ClassID", "ModuleID", "TraineeID");

                    b.ToTable("Trainee_Comment");
                });

            modelBuilder.Entity("Core.Entities.TypeFeedback", b =>
                {
                    b.Property<int>("TypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("TypeID");

                    b.ToTable("TypeFeedback");
                });

            modelBuilder.Entity("Core.Entities.Feedback", b =>
                {
                    b.HasOne("Core.Entities.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminUserName");

                    b.HasOne("Core.Entities.TypeFeedback", "TypeFeedback")
                        .WithMany()
                        .HasForeignKey("TypeFeedbackID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Feedback_Question", b =>
                {
                    b.HasOne("Core.Entities.Feedback", "Feedback")
                        .WithMany()
                        .HasForeignKey("FeedbackID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Module", b =>
                {
                    b.HasOne("Core.Entities.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminUserName");

                    b.HasOne("Core.Entities.Feedback", "Feedback")
                        .WithMany()
                        .HasForeignKey("FeedbackID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
